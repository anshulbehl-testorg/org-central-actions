name: Repository Creation Listener

on:
  repository_dispatch:
    types: [repository_created]

jobs:
  add-folder:
    if: ${{ github.event.client_payload.repository }}
    runs-on: ubuntu-latest

    steps:
      - name: Log webhook payload
        run: echo '${{ toJson(github.event) }}'
        
      - name: Remove branch protection from new repository
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          new_repo="${{ github.event.client_payload.repository }}"
          echo "New repository: ${new_repo}"
          curl -X DELETE \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/$new_repo/branches/main/protection
    
      - name: Checkout central repository
        uses: actions/checkout@v2

      - name: Trigger new repository setup
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          new_repo="${{ github.event.client_payload.repository }}"
          repo_name=$(basename $new_repo)
          repo_name=$(echo $repo_name | sed 's/_/-/g')
          echo "New repository: ${new_repo}"
          git clone https://x-access-token:${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/${new_repo}.git
          cd $(basename ${new_repo})

          # Install yq for YAML processing
          sudo apt-get update && sudo apt-get install -y jq
          sudo wget https://github.com/mikefarah/yq/releases/download/v4.9.8/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq
          
          # Update devfile.yaml
          if [ -f devfile.yaml ]; then
            if [ -z "$(yq eval '.commands[] | select(.id == "install-collections")' devfile.yaml)" ]; then
              yq eval '.commands += [{"id": "install-collections", "exec": {"component": "tooling-container", "commandLine": "ansible-galaxy collection install -r collections/requirements.yml", "workingDir": "${PROJECT_SOURCE}"}}]' -i devfile.yaml
              yq eval '.events.postStart += ["install-collections"]' -i devfile.yaml
            fi

            # Add pip install command for Python dependencies
            if [ -z "$(yq eval '.commands[] | select(.id == "install-python-dependencies")' devfile.yaml)" ]; then
              yq eval '.commands += [{"id": "install-python-dependencies", "exec": {"component": "tooling-container", "commandLine": "pip install -r requirements.txt", "workingDir": "${PROJECT_SOURCE}"}}]' -i devfile.yaml
              yq eval '.events.postStart += ["install-python-dependencies"]' -i devfile.yaml
            fi

          # Update devfile.yaml to include git configuration
            if [ -z "$(yq eval '.commands[] | select(.id == "configure-git")' devfile.yaml)" ]; then
              yq eval '.commands += [{"id": "configure-git", "exec": {"component": "tooling-container", "commandLine": "git config --global user.name \"GitHub Action\" && git config --global user.email \"action@github.com\"", "workingDir": "${PROJECT_SOURCE}"}}]' -i devfile.yaml
              yq eval '.events.postStart += ["configure-git"]' -i devfile.yaml
           fi

            git_url="https://github.com/${new_repo}.git"
            git_branch="devel"

            # Update devfile to include project dev branch
            if [ -z "$(yq eval '.projects[] | select(.name == "'$repo_name'")' devfile.yaml)" ]; then
              yq eval '.projects += [{"name": "'$repo_name'", "git": {"remotes": {"origin":"'$git_url'"}, "checkoutFrom": {"revision": "'$git_branch'"}}}]' -i devfile.yaml
            fi

          else
            echo "devfile.yml not found in the repository."
          fi
          full_name=$(yq eval '.metadata.name' catalog-info.yaml | sed 's/^BLUEPRINT-//')
          echo "Collection Name: ${full_name}"
          collection_namespace=$(echo $full_name | awk -F. '{print $1}')
          collection_name=$(echo $full_name | awk -F. '{print $2}')
          # Configure git
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          cp -R ../docs .
          cp ../mkdocs.yml .
          git add .
          git commit -m "Update devfile.yaml"
          git push origin main

          git pull origin main --rebase
          git checkout -b devel

          # Update or create collections/requirements.yml without duplication
          mkdir -p collections
          if [ -f collections/requirements.yml ]; then
            if [ -z "$(yq eval '.collections[] | select(.name == "amazon.aws")' collections/requirements.yml)" ]; then
            # Collection does not exist, so add it
              yq eval '.collections += [{"name": "amazon.aws"}]' -i collections/requirements.yml
            else
              echo "amazon.aws collection already exists in requirements.yml, not adding again."
            fi
          else
            echo "collections/requirements.yml not found, creating a new one."
            echo "---\ncollections:\n  - name: amazon.aws" > collections/requirements.yml
          fi

          # Check if requirements.txt exists, and create it if it doesn't
          if [ ! -f requirements.txt ]; then
            echo -e "boto3\nbotocore" > requirements.txt
          else
            echo "requirements.txt already exists, not creating a new one."
          fi
          
          

          cp -R ../controller_configuration .
          cp ../github-external-workflows/controller-config-devel.yml ./.github/workflows/
          cp ../github-external-workflows/controller-config-main.yml ./.github/workflows/
          cp -r ../playbooks/* .
          #yq eval -i '.roles[] |= select(.role == "aws.aws_operations.run") | .role = env(full_name) + ".run"' aws_playbook.yml
          sed -i '' "s/collns/$collection_namespace/" aws_playbook.yml
          sed -i '' "s/collname/$collection_name/" aws_playbook.yml
          mv run collections/ansible_collections/$collection_namespace/$collection_name/
          git add .
          git commit -m "Add directory from org-central-actions" -m "Update devfile.yaml and add amazon.aws to collections/requirements.yml"
          git push origin devel
      - name: Set branch protection for main
        env:
          GITHUB_TOKEN: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        run: |
          new_repo="${{ github.event.client_payload.repository }}"
          echo "New repository: ${new_repo}"
          curl -X PUT \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/$new_repo/branches/main/protection \
            -d '{
                  "required_status_checks": {
                    "strict": true,
                    "contexts": []
                  },
                  "enforce_admins": true,
                  "required_pull_request_reviews": {
                    "dismiss_stale_reviews": false,
                    "require_code_owner_reviews": false,
                    "required_approving_review_count": 0
                  },
                  "restrictions": null,
                  "allow_force_pushes": false,
                  "allow_deletions": false
                }'
